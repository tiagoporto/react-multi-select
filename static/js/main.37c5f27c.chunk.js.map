{"version":3,"sources":["App.module.scss","components/MultiSelect/useGetEmails.ts","utils/validations.ts","components/MultiSelect/MultiSelect.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/MultiSelect/MultiSelect.module.scss"],"names":["module","exports","useGetEmails","useState","emails","setEmails","useEffect","fetch","then","response","json","data","validateEmail","email","test","toLowerCase","Select","initialEmails","selected","filtered","isOpen","setIsOpen","inputRef","createRef","useLayer","placement","triggerProps","layerProps","renderLayer","filterEmails","filter","toRemove","Set","includes","has","prevState","addEmail","current","value","removeSelected","find","filteredEmail","handleChange","debounce","event","target","className","style","fakeInput","map","index","cx","tag","tagError","removeButton","onClick","type","onChange","onKeyDown","key","currentTarget","preventDefault","placeholder","input","onFocus","ref","name","id","multiple","select","option","App","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.37c5f27c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__uN9ca\"};","import { useEffect, useState } from \"react\";\n\nexport const useGetEmails = () => {\n  const [emails, setEmails] = useState<string[]>([]);\n\n  const getEmails = () => {\n    fetch(\"https://tiagoporto.github.io/react-multi-select/email-list.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        setEmails(data);\n      });\n  };\n\n  useEffect(() => {\n    getEmails();\n  }, []);\n\n  return emails;\n};\n","export const validateEmail = (email: string) => {\n  return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email.toLowerCase());\n};\n","import style from \"./MultiSelect.module.scss\";\nimport React, {\n  ChangeEvent,\n  createRef,\n  KeyboardEvent,\n  useEffect,\n  useState,\n} from \"react\";\nimport { useGetEmails } from \"./useGetEmails\";\nimport debounce from \"debounce\";\nimport { useLayer } from \"react-laag\";\nimport cx from \"classnames\";\nimport { validateEmail } from \"../../utils/validations\";\n\ninterface Emails {\n  selected: string[];\n  filtered: string[];\n}\n\nexport const Select = () => {\n  let initialEmails = useGetEmails();\n  const [emails, setEmails] = useState<Emails>({ selected: [], filtered: [] });\n  const [isOpen, setIsOpen] = useState(false);\n  const inputRef = createRef<HTMLInputElement>();\n  const { triggerProps, layerProps, renderLayer } = useLayer({\n    placement: \"bottom-start\",\n    isOpen,\n  });\n\n  const filterEmails = (filter: string) => {\n    const toRemove = new Set(emails.selected);\n\n    const filtered = initialEmails\n      .filter((email) => email.includes(filter))\n      .filter((emails) => !toRemove.has(emails));\n    setEmails((prevState) => ({ ...prevState, filtered }));\n  };\n\n  const addEmail = (email: string) => {\n    const selected = [...emails.selected, email];\n\n    setEmails((prevState) => ({\n      ...prevState,\n      selected,\n    }));\n    filterEmails(\"\");\n    setIsOpen(false);\n    inputRef.current && (inputRef.current.value = \"\");\n  };\n\n  const removeSelected = (email: string) => () => {\n    let filtered = emails.filtered;\n    if (initialEmails.find((email) => email)) {\n      filtered = [...emails.filtered, email];\n    }\n\n    const selected = emails.selected.filter(\n      (filteredEmail) => filteredEmail !== email\n    );\n\n    setEmails((prevState) => ({\n      ...prevState,\n      selected,\n      filtered,\n    }));\n  };\n\n  const handleChange = debounce((event: ChangeEvent<HTMLInputElement>) => {\n    const value = event.target.value;\n    filterEmails(value);\n    setIsOpen(true);\n  }, 200);\n\n  const handleFocus = () => {\n    setIsOpen(true);\n  };\n\n  const handleSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    const value = event.target.value;\n    value && addEmail(value);\n  };\n\n  const handleKeyDown = (event: KeyboardEvent<HTMLInputElement>) => {\n    if (\n      (event.key === \"Enter\" || event.key === \"Tab\") &&\n      event.currentTarget.value\n    ) {\n      addEmail(event.currentTarget.value);\n      event.preventDefault();\n    }\n  };\n\n  useEffect(() => {\n    setEmails((prevState) => ({ ...prevState, filtered: initialEmails }));\n  }, [initialEmails]);\n\n  return (\n    <>\n      <div className={style.fakeInput} {...triggerProps}>\n        {emails.selected.map((email, index) => {\n          return (\n            <div\n              className={cx(style.tag, {\n                [style.tagError]: !validateEmail(email),\n              })}\n              key={index}\n            >\n              {email}\n              <button\n                className={style.removeButton}\n                onClick={removeSelected(email)}\n              >\n                X\n              </button>\n            </div>\n          );\n        })}\n\n        <input\n          type=\"text\"\n          onChange={handleChange}\n          onKeyDown={handleKeyDown}\n          placeholder=\"Enter email...\"\n          className={style.input}\n          onFocus={handleFocus}\n          ref={inputRef}\n        />\n      </div>\n\n      {isOpen &&\n        renderLayer(\n          <select\n            name=\"emails\"\n            id=\"emails\"\n            onChange={handleSelect}\n            multiple\n            {...layerProps}\n            className={style.select}\n          >\n            {emails.filtered.map((email, index) => {\n              return (\n                <option value={email} key={index} className={style.option}>\n                  {email}\n                </option>\n              );\n            })}\n          </select>\n        )}\n    </>\n  );\n};\n","import React from \"react\";\nimport style from \"./App.module.scss\";\nimport { Select } from \"./components/MultiSelect\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className={style.main}>\n        <Select />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"select\":\"MultiSelect_select__2kkf8\",\"fakeInput\":\"MultiSelect_fakeInput__2-fFb\",\"input\":\"MultiSelect_input__14yVk\",\"tag\":\"MultiSelect_tag__1aaVb\",\"removeButton\":\"MultiSelect_removeButton__1mr2a\",\"tagError\":\"MultiSelect_tagError__3mfV9\",\"option\":\"MultiSelect_option__O17Xh\"};"],"sourceRoot":""}