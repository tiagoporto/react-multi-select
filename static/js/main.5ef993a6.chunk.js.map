{"version":3,"sources":["App.module.scss","components/MultiSelect/useGetEmails.ts","components/MultiSelect/MultiSelect.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/MultiSelect/MultiSelect.module.scss"],"names":["module","exports","useGetEmails","useState","emails","setEmails","useEffect","fetch","then","response","json","data","Select","initialEmails","selected","filtered","handleChange","debounce","event","filter","toRemove","Set","email","includes","has","prevState","filterEmails","target","value","removeSelected","find","filteredEmail","className","style","fakeInput","map","index","tag","removeButton","onClick","type","onChange","placeholder","input","name","id","App","main","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"kHACAA,EAAOC,QAAU,CAAC,KAAO,oB,qJCCZC,EAAe,WAAO,IAAD,EACJC,mBAAmB,IADf,mBACzBC,EADyB,KACjBC,EADiB,KAehC,OAJAC,qBAAU,WAPRC,MAAM,mEACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLN,EAAUM,QAMb,IAEIP,G,wBCPIQ,EAAS,WACpB,IAAIC,EAAgBX,IADM,EAEEC,mBAAiB,CAAEW,SAAU,GAAIC,SAAU,KAF7C,mBAEnBX,EAFmB,KAEXC,EAFW,KAapBW,EAAeC,KAAS,SAACC,IATV,SAACC,GACpB,IAAMC,EAAW,IAAIC,IAAIjB,EAAOU,UAE1BC,EAAWF,EACdM,QAAO,SAACG,GAAD,OAAWA,EAAMC,SAASJ,MACjCA,QAAO,SAACf,GAAD,OAAagB,EAASI,IAAIpB,MACpCC,GAAU,SAACoB,GAAD,mBAAC,eAAoBA,GAArB,IAAgCV,gBAI1CW,CAAaR,EAAMS,OAAOC,SACzB,KAeGC,EAAiB,SAACP,GAAD,OAAmB,WACxC,IAAIP,EAAWX,EAAOW,SAClBF,EAAciB,MAAK,SAACR,GAAD,OAAWA,OAChCP,EAAQ,sBAAOX,EAAOW,UAAd,CAAwBO,KAGlC,IAAMR,EAAWV,EAAOU,SAASK,QAC/B,SAACY,GAAD,OAAmBA,IAAkBT,KAGvCjB,GAAU,SAACoB,GAAD,mBAAC,eACNA,GADK,IAERX,WACAC,kBAQJ,OAJAT,qBAAU,WACRD,GAAU,SAACoB,GAAD,mBAAC,eAAoBA,GAArB,IAAgCV,SAAUF,SACnD,CAACA,IAGF,qCACE,sBAAKmB,UAAWC,IAAMC,UAAtB,UACG9B,EAAOU,SAASqB,KAAI,SAACb,EAAOc,GAC3B,OACE,sBAAKJ,UAAWC,IAAMI,IAAtB,UACGf,EACD,wBACEU,UAAWC,IAAMK,aACjBC,QAASV,EAAeP,GAF1B,iBAF8Bc,MAoBpC,uBACEI,KAAK,OACLC,SAAUzB,EACV0B,YAAY,iBACZV,UAAWC,IAAMU,WAIrB,yBAAQC,KAAK,SAASC,GAAG,SAASJ,SAnEjB,SAACvB,GACpB,IAAMH,EAAWX,EAAOW,SAASI,QAC/B,SAACY,GAAD,OAAmBA,IAAkBb,EAAMS,OAAOC,SAE9Cd,EAAQ,sBAAOV,EAAOU,UAAd,CAAwBI,EAAMS,OAAOC,QAEnDvB,GAAU,SAACoB,GAAD,mBAAC,eACNA,GADK,IAERV,WACAD,iBA0DA,UACE,wBAAQc,MAAM,KACbxB,EAAOW,SAASoB,KAAI,SAACb,EAAOc,GAC3B,OACE,wBAAQR,MAAON,EAAf,SACGA,GADwBc,aCpFxBU,MAVf,WACE,OACE,qBAAKd,UAAU,MAAf,SACE,sBAAMA,UAAWC,IAAMc,KAAvB,SACE,cAAC,EAAD,SCMOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHdO,IAASC,OACP,cAAC,aAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,K,kBCfAhD,EAAOC,QAAU,CAAC,UAAY,+BAA+B,MAAQ,2BAA2B,IAAM,yBAAyB,aAAe,kCAAkC,SAAW,iC","file":"static/js/main.5ef993a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"App_main__uN9ca\"};","import { useEffect, useState } from \"react\";\n\nexport const useGetEmails = () => {\n  const [emails, setEmails] = useState<string[]>([]);\n\n  const getEmails = () => {\n    fetch(\"https://tiagoporto.github.io/react-multi-select/email-list.json\")\n      .then((response) => response.json())\n      .then((data) => {\n        setEmails(data);\n      });\n  };\n\n  useEffect(() => {\n    getEmails();\n  }, []);\n\n  return emails;\n};\n","import style from \"./MultiSelect.module.scss\";\nimport React, { ChangeEvent, useEffect, useState } from \"react\";\nimport { useGetEmails } from \"./useGetEmails\";\nimport debounce from \"debounce\";\n\ninterface Emails {\n  selected: string[];\n  filtered: string[];\n}\n\nexport const Select = () => {\n  let initialEmails = useGetEmails();\n  const [emails, setEmails] = useState<Emails>({ selected: [], filtered: [] });\n\n  const filterEmails = (filter: string) => {\n    const toRemove = new Set(emails.selected);\n\n    const filtered = initialEmails\n      .filter((email) => email.includes(filter))\n      .filter((emails) => !toRemove.has(emails));\n    setEmails((prevState) => ({ ...prevState, filtered }));\n  };\n\n  const handleChange = debounce((event: ChangeEvent<HTMLInputElement>) => {\n    filterEmails(event.target.value);\n  }, 200);\n\n  const handleSelect = (event: ChangeEvent<HTMLSelectElement>) => {\n    const filtered = emails.filtered.filter(\n      (filteredEmail) => filteredEmail !== event.target.value\n    );\n    const selected = [...emails.selected, event.target.value];\n\n    setEmails((prevState) => ({\n      ...prevState,\n      filtered,\n      selected,\n    }));\n  };\n\n  const removeSelected = (email: string) => () => {\n    let filtered = emails.filtered;\n    if (initialEmails.find((email) => email)) {\n      filtered = [...emails.filtered, email];\n    }\n\n    const selected = emails.selected.filter(\n      (filteredEmail) => filteredEmail !== email\n    );\n\n    setEmails((prevState) => ({\n      ...prevState,\n      selected,\n      filtered,\n    }));\n  };\n\n  useEffect(() => {\n    setEmails((prevState) => ({ ...prevState, filtered: initialEmails }));\n  }, [initialEmails]);\n\n  return (\n    <>\n      <div className={style.fakeInput}>\n        {emails.selected.map((email, index) => {\n          return (\n            <div className={style.tag} key={index}>\n              {email}\n              <button\n                className={style.removeButton}\n                onClick={removeSelected(email)}\n              >\n                X\n              </button>\n            </div>\n          );\n        })}\n        {/*\n\n        <div className={`${style.tag} ${style.tagError}`}>\n          tiago@gmail.com\n          <button className={style.removeButton} onClick={handleClick}>\n            X\n          </button>\n        </div> */}\n\n        <input\n          type=\"text\"\n          onChange={handleChange}\n          placeholder=\"Enter email...\"\n          className={style.input}\n        />\n      </div>\n\n      <select name=\"emails\" id=\"emails\" onChange={handleSelect}>\n        <option value=\"\"></option>\n        {emails.filtered.map((email, index) => {\n          return (\n            <option value={email} key={index}>\n              {email}\n            </option>\n          );\n        })}\n      </select>\n    </>\n  );\n};\n","import React from \"react\";\nimport style from \"./App.module.scss\";\nimport { Select } from \"./components/MultiSelect\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <main className={style.main}>\n        <Select />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fakeInput\":\"MultiSelect_fakeInput__2-fFb\",\"input\":\"MultiSelect_input__14yVk\",\"tag\":\"MultiSelect_tag__1aaVb\",\"removeButton\":\"MultiSelect_removeButton__1mr2a\",\"tagError\":\"MultiSelect_tagError__3mfV9\"};"],"sourceRoot":""}